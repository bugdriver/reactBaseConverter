{"version":3,"sources":["inputBox.js","BaseConverter.js","App.js","serviceWorker.js","index.js"],"names":["range","start","end","list","i","push","InputBox","props","handleChange","bind","input","base","this","validNumbers","map","slice","validChars","validCombination","concat","toLowerCase","split","every","char","includes","event","value","target","isValid","onChange","parseInt","convertedValue","toString","type","React","Component","BaseConverter","state","setState","inputBoxes","key","style","margin","display","flexDirection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAEMA,EAAQ,SAASC,EAAOC,GAE5B,IADA,IAAMC,EAAO,GACJC,EAAIH,EAAOG,EAAIF,EAAKE,IAC3BD,EAAKE,KAAKD,GAEZ,OAAOD,GAGHG,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,oDAKXC,GAAQ,IACNC,EAASC,KAAKL,MAAdI,KACFE,EAAeb,EAAM,EAAG,IAC3Bc,KAAI,SAACV,GAAD,gBAAUA,MACdW,MAAM,EAAGJ,GACNK,EAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKD,MAAM,EAAGJ,EAAO,IAC5DM,EAAmBJ,EAAaK,OAAOF,GAE7C,OADqBN,EAAMS,cAAcC,MAAM,IAC3BC,OAAM,SAACC,GAAD,OAAUL,EAAiBM,SAASD,Q,mCAGnDE,GACX,IAAMC,EAAQD,EAAME,OAAOD,MACvBb,KAAKe,QAAQF,IACfb,KAAKL,MAAMqB,SAASC,SAASJ,EAAOb,KAAKL,MAAMI,S,+BAIzC,IAAD,EACiBC,KAAKL,MAArBkB,EADD,EACCA,MAAOd,EADR,EACQA,KACTmB,EAAiBD,SAASJ,GAAOM,SAASpB,GAChD,OACE,2BAAOqB,KAAK,OAAOP,MAAOK,EAAgBF,SAAUhB,KAAKJ,mB,GA5BxCyB,IAAMC,WC0BdC,E,kDAhCb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IACD6B,MAAQ,CAAEX,MAAO,GACtB,EAAKjB,aAAe,EAAKA,aAAaC,KAAlB,gBAHH,E,yDAMNgB,GACNA,IAAOA,EAAQ,GACpBb,KAAKyB,SAAS,CAAEZ,Y,+BAGR,IAAD,OACDa,EAAatC,EAAM,EAAG,IAAIc,KAAI,SAACH,GACnC,OACE,yBAAK4B,IAAK5B,EAAM6B,MAAO,CAAEC,OAAQ,UAC/B,sCAAY9B,EAAZ,OACA,kBAAC,EAAD,CACEA,KAAMA,EACNc,MAAO,EAAKW,MAAMX,MAClBG,SAAU,EAAKpB,mBAKvB,OACE,yBAAKgC,MAAO,CAAEE,QAAS,OAAQC,cAAe,WAC3CL,O,GA3BmBL,IAAMC,WCInBU,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f77433f0.chunk.js","sourcesContent":["import React from 'react';\n\nconst range = function(start, end) {\n  const list = [];\n  for (let i = start; i < end; i++) {\n    list.push(i);\n  }\n  return list;\n};\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  isValid(input) {\n    const { base } = this.props;\n    const validNumbers = range(0, 10)\n      .map((i) => `${i}`)\n      .slice(0, base);\n    const validChars = ['a', 'b', 'c', 'd', 'e', 'f'].slice(0, base - 10);\n    const validCombination = validNumbers.concat(validChars);\n    const charsInInput = input.toLowerCase().split('');\n    return charsInInput.every((char) => validCombination.includes(char));\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    if (this.isValid(value)) {\n      this.props.onChange(parseInt(value, this.props.base));\n    }\n  }\n\n  render() {\n    const { value, base } = this.props;\n    const convertedValue = parseInt(value).toString(base);\n    return (\n      <input type=\"text\" value={convertedValue} onChange={this.handleChange} />\n    );\n  }\n}\n\nexport { InputBox, range };\n","import React from 'react';\nimport { InputBox, range } from './inputBox';\n\nclass BaseConverter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: 0 };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(value) {\n    if (!value) value = 0;\n    this.setState({ value });\n  }\n\n  render() {\n    const inputBoxes = range(2, 17).map((base) => {\n      return (\n        <div key={base} style={{ margin: '0.5em' }}>\n          <span>Base {base} : </span>\n          <InputBox\n            base={base}\n            value={this.state.value}\n            onChange={this.handleChange}\n          />\n        </div>\n      );\n    });\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        {inputBoxes}\n      </div>\n    );\n  }\n}\n\nexport default BaseConverter;\n","import React from 'react';\nimport BaseConverter from './BaseConverter';\n\nfunction App() {\n  return <BaseConverter></BaseConverter>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}